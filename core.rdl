core:xq-version($,"3.1"),
core:module($,core,"http://raddle.org/core",()),
core:import($,raddle,"http://raddle.org/raddle","../content/raddle.xql"),
core:import($,op,"http://www.w3.org/2005/xpath-functions/op","op.xql"),
core:import($,n,"http://raddle.org/native-xq","n.xql"),
core:import($,a,"http://raddle.org/array-util","array-util.xql"),
core:import($,console,"http://exist-db.org/xquery/console"),
core:define($,core:element,(),(core:item($,frame),core:item($,name),core:item($,content)),core:item(),(n:element($name,$content))),
core:define($,core:attribute,(),(core:item($,frame),core:item($,name),core:item($,content)),core:item(),(n:attribute($name,$content))),
core:define($,core:text,(),(core:item($,frame),core:item($,content)),core:item(),(n:text($content))),
core:define($,core:define,(),(core:item($,frame),core:item($,name),core:item($,desc),core:item($,args),core:item($,type),core:item($,body)),core:item(),((core:item($,map,a:fold-left-at($args,core:map(()),core:function((core:item($,pre),core:item($,_),core:item($,i)),core:item(),($_($frame)($pre,(),$i))))),map:new(($frame,map:entry("$functions",core:describe($frame("$functions"),$name,$desc,$args,$type)),map:entry("$exports",map:put($frame("$exports"),concat($name,"#",array:size($args)),n:bind($body,$args,$type)($frame)))))))),
core:define($,core:describe,(),(core:item($,frame),core:item($,name),core:item($,desc),core:item($,args),core:item($,type)),core:item(),(map:put($frame,concat($name,"#",array:size($args)),core:map(("name",$name,"description",$desc))))),
core:define($,core:function,(),(core:item($,args),core:item($,type),core:item($,body)),core:item(),(n:bind($body,$args,$type))),
core:define($,core:get-name-suffix,(),(core:item($,name)),core:item(),((core:item($,cp,string-to-codepoints($name)),core:if(core:geq(core:filter($cp,(last())),(42,43,45,63,95)),(codepoints-to-string(reverse(tail(reverse($cp)))),codepoints-to-string(core:filter($cp,(last())))),($name,""))))),
core:define($,core:typegen1,(),(core:item($,type),core:item($,valtype)),core:item(),(util:eval(concat($type,"(",$valtype,")")))),
core:define($,core:typegen1,(),(core:item($,type),core:item($,seq)),core:item(),(core:if(core:eq($type,"array"),n:array($seq),()))),
core:define($,core:typegen2,(),(core:item($,type),core:item($,keytype),core:item($,valtype),core:item($,body)),core:item(),(core:if(core:eq($type,"map"),util:eval(concat("map {",$body,"}")),core:function($keytype,$valtype,$body)))),
core:define($,core:typegen2,(),(core:item($,type),core:item($,keytype),core:item($,valtype)),core:item(),(util:eval(concat($type,"(",$valtype,")")))),
core:define($,core:typegen2,(),(core:item($,type),core:item($,body)),core:item(),(core:if(core:eq($type,"map"),util:eval(concat("map {",$body,"}")),()))),
core:define($,core:typegen2,(),(core:item($,type),core:item($,keytype),core:item($,valtype),core:item($,body)),core:item(),(core:if(core:eq($type,"map"),util:eval(concat("map {",$body,"}")),core:function($keytype,$valtype,$body)))),
core:define($,core:typegen,(),(core:item($,type),core:item($,frame),core:item($,name),core:item($,val)),core:item(),(map:put($frame,$name,$val))),
core:define($,core:typegen,(),(core:item($,type),core:item($,frame),core:item($,name)),core:item(),(core:function((core:item($,frame),core:item($,val),core:item($,i)),core:item(),((core:item($,val,core:if(empty($val),$type,$val)),map:put($frame,core:if(core:eq($name,""),string($i),$name),$val)))))),
core:define($,core:eval,(),(core:item($,value)),core:item(),(core:if(core:instance-of($value,core:array(core:item()?)),n:quote-seq($value),core:if(core:instance-of($value,core:map(core:string(),core:item()?)),(core:item($,name,$value("name")),core:item($,args,$value("args")),core:item($,s,array:size($args)),core:if(matches($name,core:concat(core:concat("^core:[",$raddle:ncname),"]+$")),(core:item($,local,replace($name,"^core:","")),core:item($,is-type,core:geq($local,map:keys($n:typemap))),core:item($,is-op,map:contains($n:operator-map,$local)),core:item($,args,core:if(core:or($is-type,$is-op),array:insert-before($args,1,$local),$args)),core:item($,name,core:if($is-type,(core:item($,a,$n:typemap($local)),concat("core:typegen",core:if(core:ggt($a,0),$a,""),"#",core:add($s,1))),concat($name,"#",$s))),n:quote($name,$args)),(core:item($,name,core:if(core:eq($name,""),concat("n:seq#",$s),concat($name,"#",$s))),n:quote($name,$args)))),n:quote($value))))),
core:define($,core:apply,(),(core:item($,frame),core:item($,name),core:item($,args)),core:item(),((core:item($,self,core:is-current-module($frame,$name)),core:item($,f,core:resolve-function($frame,$name,$self)),core:item($,frame,map:put($frame,"$callstack",array:append($frame("$callstack"),$name))),core:item($,frame,map:put($frame,"$caller",$name)),core:if($self,$f(core:process-args($frame,$args)),apply($f,core:process-args($frame,$args)))))),
core:define-private($,core:is-current-module,(),(core:item($,frame),core:item($,name)),core:item(),(core:and(map:contains($frame,"$prefix"),matches($name,concat("^",$frame("$prefix"),":"))))),
core:define($,core:resolve-function,(),(core:item($,frame),core:item($,name)),core:item(),(core:resolve-function($frame,$name,core:is-current-module($frame,$name)))),
core:define($,core:resolve-function,(),(core:item($,frame),core:item($,name),core:item($,self)),core:item(),(core:if($self,$frame("$exports")($name),(core:item($,parts,tokenize($name,":")),core:item($,prefix,core:if(core:filter-at($parts,(core:geq(.,2))),core:filter-at($parts,(core:geq(.,1))),"")),core:item($,module,$frame("$imports")($prefix)),core:item($,theirname,concat(core:if($module("$prefix"),concat($module("$prefix"),":"),""),core:filter($parts,(last())))),$module("$exports")($theirname))))),
core:define($,core:process-args,(),(core:item($,frame),core:item($,args)),core:item(),(a:for-each-at($args,core:function((core:item($,arg),core:item($,at)),core:item(),(core:if(core:instance-of($arg,core:array(core:item()?)),(core:item($,is-params,core:or((core:and(core:eq($frame("$caller"),"core:define#6"),core:geq($at,4))),(core:and(core:eq($frame("$caller"),"core:function#3"),core:geq($at,1))))),core:item($,is-body,core:and(core:eq($frame("$caller"),"core:define#6"),core:geq($at,6))),core:if(core:or($is-params,(core:geq(core:and(core:geq(core:is-fn-seq($arg),false()),$is-body),false()))),a:for-each($arg,core:function((core:item($,_)),core:item(),(n:eval(core:if(core:and(core:instance-of($_,core:string()),matches($_,"^\$")),core:map(("name","core:item","args",core:array(("$",replace($_,"^\$",""))))),$_))))),n:eval($arg))),core:if(core:instance-of($arg,core:map(core:string(),core:item()?)),n:eval($arg)($frame),core:if(core:eq($arg,"."),$frame("0"),core:if(core:eq($arg,"$"),$frame,core:if(matches($arg,concat("^\$[",$raddle:ncname,"]+$")),$frame(replace($arg,"^\$","")),core:if(matches($arg,concat("^[",$raddle:ncname,"]?:?[",$raddle:ncname,"]+#(\p{N}|N)+")),core:resolve-function($frame,$arg),$arg))))))))))),
core:define-private($,core:is-fn-seq,(),(core:item($,value)),core:item(),(core:if(core:eq(array:size($value),0),(),core:geq(distinct-values(array:flatten(array:for-each($value,core:function((core:item($,_)),core:item(),(core:if(core:instance-of($_,core:map(core:string(),core:item()?)),core:is-fn-seq($_("args")),core:and(core:instance-of($_,core:string()),matches($_,"^\.$|^\$$")))))))),true())))),
core:define($,core:import,(),(core:item($,frame),core:item($,prefix),core:item($,uri)),core:item(),(core:import($frame,$prefix,$uri,()))),
core:define($,core:import,(),(core:item($,frame),core:item($,prefix),core:item($,uri),core:item($,location)),core:item(),((core:item($,import,core:if(core:or(empty($location),core:eq(xmldb:get-mime-type(core:anyURI($location)),"application/xquery")),n:import($location),(core:item($,src,util:binary-to-string(util:binary-doc($location))),n:eval(raddle:parse($src,$frame))($frame)))),map:put($frame,"imports",map:put($frame("imports"),$prefix,$core))))),
core:define($,core:module,(),(core:item($,frame),core:item($,prefix),core:item($,ns),core:item($,desc)),core:item(),(map:new(($frame,core:map(("$prefix",$prefix,"$uri",$ns,"$description",$desc,"$functions",core:map(()),"$exports",core:map(())))))))