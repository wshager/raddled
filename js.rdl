core:xq-version($,"3.1");
core:module($,core,"http://raddle.org/javascript",());
core:ximport($,rdl,"http://raddle.org/raddle","../content/raddle.xql");
core:ximport($,a,"http://raddle.org/array-util","array-util.xql");
core:ximport($,env,"http://raddle.org/env","env.xql");
core:ximport($,console,"http://exist-db.org/xquery/console");
core:xvar($,$core:typemap,(),core:map((core:pair("boolean",0),core:pair("integer",0),core:pair("decimal",0),core:pair("double",0),core:pair("string",0),core:pair("item",0),core:pair("anyURI",0),core:pair("map",2),core:pair("function",1),core:pair("array",1),core:pair("element",0),core:pair("attribute",0),core:pair("numeric",0),core:pair("atomic",0),core:pair("document-node",0),core:pair("node",0),core:pair("QName",0))));
core:xvar($,$core:native-ops,(),("eq","ne","lt","le","gt","ge","add","subtract","plus","minus","multiply","div","mod","geq","gne","ggt","glt","gge","gle","concat","filter","filter-at","for-each","for-each-at","to","instance-of"));
core:xvar($,$core:auto-converted,(),core:map((core:pair("true","true()"),core:pair("false","false()"),core:pair("null","()"),core:pair("undefined","()"),core:pair("Infinity","1 div 0e0"),core:pair("-Infinity","-1 div 0e0"))));
core:define($,core:xq-version,(),(core:item($,frame),core:item($,version)),core:item(),(core:concat(core:concat("/* xquery version ",$version)," */")));
core:define($,core:and,(),(core:item($,a),core:item($,b)),core:item(),(concat("$.test(",$a,") ",$env:AMP,$env:AMP," $.test(",$b,")")));
core:define($,core:or,(),(core:item($,a),core:item($,b)),core:item(),(concat("$.test(",$a,") || $.test(",$b,")")));
core:define($,core:select,(),(core:item($,a)),core:item(),(concat("n.select(",$a,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b)),core:item(),(concat("n.select(",$a,",",$b,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b),core:item($,c)),core:item(),(concat("n.select(",$a,",",$b,",",$c,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b),core:item($,c),core:item($,d)),core:item(),(concat("n.select(",$a,",",$b,",",$c,",",$d,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b),core:item($,c),core:item($,d),core:item($,e)),core:item(),(concat("n.select(",$a,",",$b,",",$c,",",$d,",",$e,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b),core:item($,c),core:item($,d),core:item($,e),core:item($,f)),core:item(),(concat("n.select(",$a,",",$b,",",$c,",",$d,",",$e,",",$f,")")));
core:define($,core:select,(),(core:item($,a),core:item($,b),core:item($,c),core:item($,d),core:item($,e),core:item($,f),core:item($,g)),core:item(),(concat("n.select(",$a,",",$b,",",$c,",",$d,",",$e,",",$f,",",$g,")")));
core:define($,core:find-context-item,(),(core:item($,value)),core:item(),(core:iff(core:instance-of($value,core:string()),concat("findContextItem(",$value,")"),core:iff(core:eq(array:size($value),0),(),(core:item($,cx,array:filter($value,core:anon($,(core:item($,_)),core:item(),(core:and(core:instance-of($_,core:string()),matches($_,"^\.$")))))),core:iff(core:gt(array:size($cx),0),array:flatten($cx),array:flatten(a:for-each-at($value,core:anon($,(core:item($,_),core:item($,at)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item()?)),core:iff(core:eq($_("name"),""),(),core:find-context-item($_("args"))),())))))))))));
core:define($,core:find-let-seq,(),(core:item($,value)),core:item(),(core:iff(core:instance-of($value,core:string()),concat("findLetSeq(",$value,")"),core:iff(core:eq(array:size($value),0),(),array:flatten(a:for-each($value,core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item()?)),a:for-each-at($_("args"),core:anon($,(core:item($,_),core:item($,at)),core:item(),(core:iff(core:instance-of($_,core:string()),core:iff(matches($_,"^\$$"),$value(core:add($at,1)),()),())))),())))))))));
core:define($,core:is-caller,(),(core:item($,args)),core:item(),(core:iff(core:instance-of($args,core:string()),concat("isCaller(",$args,")"),a:fold-left($args,false(),core:anon($,(core:item($,pre),core:item($,arg)),core:item(),(core:or($pre,(core:and(core:instance-of($arg,core:map(core:string(),core:item()?)),core:eq($arg("name"),""))))))))));
core:define($,core:process-args,(),(core:item($,frame),core:item($,args)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processArgs(",$frame,",",$args,")"),core:process-args($frame,$args,""))));
core:define($,core:process-args,(),(core:item($,frame),core:item($,args),core:item($,caller)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processArgs(",$frame,",",$args,",",$caller,")"),core:process-args($frame,$args,$caller,"$_0"))));
core:define($,core:process-args,(),(core:item($,frame),core:item($,args),core:item($,caller),core:item($,nest)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processArgs(",$frame,",",$args,",",$caller,",",$nest,")"),(core:item($,is-defn,core:geq($caller,("core:define-private#6","core:define-private#5","core:define#6","core:define#5"))),core:item($,is-anon,core:eq($caller,"core:anon#4")),core:item($,is-iff,core:eq($caller,"core:iff#3")),core:item($,is-interop,core:eq($caller,"core:interop#3")),core:item($,is-typegen,matches($caller,core:concat(core:concat("^core:(typegen|",string-join(map:keys($core:typemap),"|")),")"))),a:fold-left-at($args,core:array(()),core:anon($,(core:item($,pre),core:item($,arg),core:item($,at)),core:item(),(core:iff(core:instance-of($arg,core:array(core:item()?)),core:iff($is-interop,array:append($pre,$arg),(core:item($,is-thenelse,core:and($is-iff,core:geq($at,(2,3)))),core:item($,let-seq,core:find-let-seq($arg)),core:item($,is-let-ret,core:ggt(count($let-seq),0)),array:append($pre,core:iff($is-thenelse,(core:item($,val,core:process-args($frame,$arg,"",$nest)),core:item($,s,array:size($val)),core:item($,ret,core:iff(core:eq($s,0),concat("return n.seq();",$env:LF),core:iff(core:gt($s,1),core:iff($is-let-ret,core:let-ret($val,$let-seq,()),concat("return n.seq(",string-join(array:flatten($val),","),");",$env:LF)),concat("return ",$val(1),";",$env:LF)))),$ret),a:for-each-at($arg,core:anon($,(core:item($,_),core:item($,at)),core:item(),(core:iff(core:instance-of($_,core:array(core:item()?)),core:process-tree($_,$frame),core:process-value($_,$frame,$at,$nest))))))))),core:iff(core:instance-of($arg,core:map(core:string(),core:item()?)),core:iff(core:or((core:and($is-defn,core:geq($at,4))),(core:and($is-anon,core:geq($at,2)))),array:append($pre,$arg("args")),(core:item($,is-thenelse,core:and($is-iff,core:geq($at,(2,3)))),core:item($,is-body,core:or((core:and($is-defn,core:geq($at,6))),(core:and($is-anon,core:geq($at,4))))),core:iff(core:or($is-body,$is-thenelse),(core:item($,args,$arg("args")),core:item($,arg,core:iff(core:and(core:and(core:and($is-body,core:eq($arg("name"),"")),core:eq(array:size($args),1)),core:instance-of($args(1),core:map(core:string(),core:item()))),$args(1),$arg)),core:item($,is-seq,core:eq($arg("name"),"")),core:item($,ret,core:iff($is-seq,(core:item($,args,$arg("args")),core:item($,let-seq,core:find-let-seq($args)),core:item($,is-let-ret,core:ggt(count($let-seq),0)),core:item($,val,core:process-args($frame,$args,"",$nest)),core:item($,s,array:size($val)),core:iff(core:eq($s,0),concat("return n.seq();",$env:LF),core:iff(core:gt($s,1),core:iff($is-let-ret,core:let-ret($val,$let-seq,()),concat("return n.seq(",string-join(array:flatten($val),","),");",$env:LF)),concat("return ",$val(1),";",$env:LF)))),(core:item($,ret,core:process-value($arg,$frame,$at)),core:iff($is-body,concat("return ",$ret,";",$env:LF),$ret)))),array:append($pre,$ret)),core:iff(core:and(core:and(core:eq($arg("name"),""),core:gt($at,1)),$arg("call")),(core:item($,val,concat("n.call(",$pre(core:subtract($at,1)),",",core:process-value($arg,$frame,$at),")")),a:put($pre,core:subtract($at,1),$val)),array:append($pre,core:process-value($arg,$frame,$at,$nest)))))),core:iff(core:eq($arg,"."),array:append($pre,$nest),core:iff(core:eq($arg,"$"),array:append($pre,$frame),core:iff(matches($arg,core:concat(core:concat("^\$[",$rdl:ncname),"]+$")),array:append($pre,core:iff(matches($arg,"^\$\p{N}"),replace($arg,"^\$","\$_"),core:serialize($arg,$frame))),core:iff(core:or((core:and((core:or($is-defn,$is-typegen)),core:eq($at,2))),(core:and($is-interop,core:eq($at,1)))),array:append($pre,$arg),core:iff(matches($arg,core:concat(core:concat("^_[",$rdl:suffix),"]?$")),array:append($pre,replace($arg,"^_",core:concat("_",$frame("$at")))),array:append($pre,core:serialize($arg,$frame))))))))))))))));
core:define($,core:native,(),(core:item($,op),core:item($,a)),core:item(),(concat("n.",rdl:camel-case($op),"(",$a,")")));
core:define($,core:native,(),(core:item($,op),core:item($,a),core:item($,b)),core:item(),(concat("n.",rdl:camel-case($op),"(",$a,",",$b,")")));
core:define($,core:pair,(),(core:item($,key),core:item($,val)),core:item(),(concat("n.pair(",$key,",",$val,")")));
core:define($,core:interop,(),(core:item($,frame),core:item($,name),core:item($,arities)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("interop(",$frame,",",$name,",",$arities,")"),(core:item($,parts,tokenize(rdl:clip($name),":")),core:item($,fname,rdl:camel-case(core:filter($parts,(core:geq(position(.),last(.)))))),concat("export function ",$fname,"(...$_a) {",$env:LF,$env:TAB,"var $_l = $_a.length;",$env:LF,$env:TAB,string-join(for-each(array:flatten($arities),core:anon($,(core:item($,a)),core:item(),((core:item($,has-rest-param,core:eq($a,core:minus(1))),concat(core:iff($has-rest-param,"",concat("if($_l===",$a,"){",$env:LF,$env:TAB,$env:TAB)),"return ",$fname,"$",$a,".apply(this,$_a);",$env:LF,$env:TAB,core:iff($has-rest-param,"",concat("}",$env:LF,$env:TAB))))))),$env:LF),$env:LF,$env:TAB,"return n.error(",$fname,",$_l);}",$env:LF)))));
core:define($,core:transpile,(),(core:item($,value),core:item($,frame)),core:item(),((core:item($,frame,map:put($frame,"$tree",$value)),core:item($,distinct,array:fold-left($value,core:map(()),core:anon($,(core:item($,pre),core:item($,cur)),core:item(),(core:iff(core:and(core:geq($cur("name"),("core:define","core:define-private")),core:eq(array:size($cur("args")),6)),(core:item($,name,$cur("args")(2)),core:item($,argseq,$cur("args")(4)),core:item($,args,$argseq("args")),core:item($,arity,array:size($args)),core:item($,last,$args($arity)),core:item($,has-rest-param,core:iff(core:instance-of($last,core:map(core:string(),core:item()?)),matches($last("args")(2),"^\.{3}"),matches($last,"^\.{3}"))),core:item($,arity,core:iff($has-rest-param,core:minus(1),$arity)),core:iff(map:contains($pre,$name),map:put($pre,$name,array:append($pre($name),$arity)),map:put($pre,$name,core:array(($arity))))),$pre))))),core:item($,value,array:join(($value,core:array((map:for-each-entry($distinct,core:anon($,(core:item($,name),core:item($,arities)),core:item(),(core:map((core:pair("name","core:interop"),core:pair("args",core:array(($frame,$name,$arities))),core:pair("suffix",""))))))))))),core:process-tree($value,$frame,true()))));
core:define($,core:process-tree,(),(core:item($,tree),core:item($,frame)),core:item(),(core:iff(core:instance-of($tree,core:string()),concat("processTree(",$tree,",",$frame,")"),core:process-tree($tree,$frame,false()))));
core:define($,core:process-tree,(),(core:item($,tree),core:item($,frame),core:item($,top)),core:item(),(core:iff(core:instance-of($tree,core:string()),concat("processTree(",$tree,",",$frame,",",$top,")"),core:process-tree($tree,$frame,$top,""))));
core:define($,core:process-tree,(),(core:item($,tree),core:item($,frame),core:item($,top),core:item($,ret)),core:item(),(core:iff(core:instance-of($tree,core:string()),concat("processTree(",$tree,",",$frame,",",$top,",",$ret,")"),core:process-tree($tree,$frame,$top,$ret,1))));
core:define($,core:process-tree,(),(core:item($,tree),core:item($,frame),core:item($,top),core:item($,ret),core:item($,at)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processTree(",$tree,",",$frame,",",$top,",",$ret,",",$at,")"),core:iff(core:gt(array:size($tree),0),(core:item($,head,array:head($tree)),core:item($,frame,core:iff(core:and(core:instance-of($head,core:map(core:string(),core:item()?)),core:eq($head("name"),"core:module")),map:put($frame,"$prefix",$head("args")(2)),$frame)),core:item($,is-seq,core:eq($head("name"),"")),core:item($,let-seq,core:find-let-seq($head("args"))),core:item($,is-let-ret,core:ggt(count($let-seq),0)),core:item($,val,core:process-value($head,$frame,$at)),core:item($,val,core:iff($is-seq,core:iff($is-let-ret,concat("(",string-join(array:flatten($val),","),")"),concat("n.seq(",string-join(array:flatten($val),","),")")),$val)),core:item($,ret,concat($ret,core:iff(core:and(core:ne($ret,""),core:ggt($at,1)),core:iff($top,$env:LF,concat(",",$env:LF)),""),$val)),core:process-tree(array:tail($tree),$frame,$top,$ret,core:add($at,1))),core:iff(core:geq($at,1),"n.seq()",$ret)))));
core:define($,core:resolve-module,(),(core:item($,tree),core:item($,name)),core:item(),(core:iff(core:instance-of($tree,core:map(core:string(),core:item()?)),core:iff(core:and(core:eq($tree("name"),"core:define"),$tree("args")),core:eq((2),$name),$tree,core:resolve-module($tree("args"),$name)),core:iff(core:instance-of($tree,core:array(core:item()?)),array:flatten(array:for-each($tree,core:anon($,(core:item($,arg)),core:item(),(core:resolve-module($arg,$name))))),()))));
core:define($,core:process-value,(),(core:item($,value),core:item($,frame),core:item($,at)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processValue(",$value,",",$frame,",",$at,")"),core:process-value($value,$frame,$at,"$_0"))));
core:define($,core:process-value,(),(core:item($,value),core:item($,frame),core:item($,at),core:item($,nest)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("processValue(",$value,",",$frame,",",$at,",",$nest,")"),core:iff(core:instance-of($value,core:map(core:string(),core:item()?)),(core:item($,name,$value("name")),core:item($,args,$value("args")),core:item($,s,core:iff(map:contains($value,"args"),array:size($args),0)),core:iff(map:contains($value,"$tree"),"",core:iff(matches($name,core:concat(core:concat("^core:[",$rdl:ncname),"]+$")),(core:item($,local,replace($name,"^core:","")),core:item($,is-type,core:geq($local,map:keys($core:typemap))),core:item($,is-native,core:geq($core:native-ops,$local)),core:item($,s,core:iff(core:or($is-type,$is-native),core:add($s,1),$s)),core:item($,is-defn,core:geq($local,("define","define-private","anon"))),core:item($,is-fn,core:or(core:or((core:and($is-defn,(core:or(core:eq($s,6),core:eq($s,5))))),(core:and(core:eq($local,"anon"),core:eq($s,4)))),(core:eq($local,"interop")))),core:item($,let-ret,core:iff(core:and($is-type,core:gt($s,1)),(core:item($,_,$args(core:subtract($s,1))),core:iff(core:and(core:instance-of($_,core:map(core:string(),core:item()?)),core:eq($_("name"),"")),core:find-let-seq($_("args")),())),())),core:item($,args,core:process-args($frame,$args,concat($name,"#",$s),$nest)),core:item($,args,core:iff(core:or($is-type,$is-native),array:insert-before($args,1,$local),$args)),core:item($,args,a:for-each-at($args,core:anon($,(core:item($,_),core:item($,i)),core:item(),(core:iff(core:and(core:and($is-type,core:eq($i,$s)),core:gt(count($let-ret),0)),concat("($ => {",core:let-ret($_,$let-ret,()),"})($.frame())"),core:iff(core:and(core:instance-of($_,core:array(core:item()?)),core:eq($is-fn,false())),concat("n.seq(",string-join(array:flatten($_),","),")"),$_)))))),core:item($,s,array:size($args)),core:item($,fn,core:iff($is-type,(core:item($,a,$core:typemap($local)),core:item($,f,concat("core:typegen",core:iff(core:ggt($a,0),$a,""))),function-lookup(QName("http://raddle.org/javascript",$f),$s)),core:iff($is-native,function-lookup(QName("http://raddle.org/javascript","core:native"),$s),function-lookup(QName("http://raddle.org/javascript",$name),$s)))),core:item($,n,core:iff(empty($fn),console:log(($name,"#",$s,":",$args)),())),core:item($,ret,apply($fn,$args)),$ret),core:iff(core:eq($name,""),(core:item($,cx,core:find-context-item($args)),core:item($,args,a:for-each(core:process-args($frame,$args),core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:array(core:item()?)),concat("n.seq(",string-join(array:flatten($_),","),")"),$_))))),core:iff(core:geq($cx,"."),concat("$_0 => ",string-join(array:flatten($args),"")),$args)),(core:item($,args,core:process-args($frame,$args,concat($name,"#",$s),$nest)),core:item($,ret,a:fold-left-at($args,"",core:anon($,(core:item($,pre),core:item($,cur),core:item($,at)),core:item(),(concat($pre,core:iff(core:ggt($at,1),",",""),core:iff(core:instance-of($cur,core:array(core:item()?)),concat("n.seq(",string-join(array:flatten($cur),","),")"),core:iff(core:instance-of($cur,core:map(core:string(),core:item()?)),core:process-value($cur,$frame,$at,$nest),$cur))))))),core:iff(matches($name,"^(\$.*)$|^([^#]+#[0-9]+)$"),concat("n.call(",core:convert($name,$frame),",",$ret,")"),concat(core:anon-name($frame,$name,$s,"fn"),"(",$ret,")"))))))),core:iff(core:instance-of($value,core:array(core:item()?)),concat("n.seq(",core:process-tree($value,$frame),")"),core:iff(matches($value,core:concat(core:concat("^_[",$rdl:suffix),"]?$")),replace($value,"^_",core:concat("\$_",$at)),core:serialize($value,$frame)))))));
core:define($,core:is-current-module,(),(core:item($,frame),core:item($,name)),core:item(),(concat("isCurrentModule(",$frame,",",$name,")")));
core:define($,core:convert,(),(core:item($,string),core:item($,frame)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("convert(",$string,",",$frame,")"),core:iff(matches($string,"^n\.call"),$string,core:iff(matches($string,"^(\$.*)$|^([^#]+#[0-9]+)$"),(core:item($,parts,tokenize(rdl:camel-case(replace($string,"#\p{N}+$","")),":")),core:iff(core:eq(count($parts),1),concat("$(",$env:QUOT,replace($parts,"^\$",""),$env:QUOT,")"),core:iff(matches(core:filter($parts,(core:geq(position(.),1))),concat("^\$?",$frame("$prefix"))),replace(core:filter($parts,(core:geq(position(.),last(.)))),"\$",""),concat(replace(core:filter($parts,(core:geq(position(.),1))),"\$",""),".",core:filter($parts,(core:geq(position(.),2))))))),core:iff(matches($string,concat("^(",$env:QUOT,"[^",$env:QUOT,"]*",$env:QUOT,")$")),concat("n.string(",replace($string,"\\","\\\\"),")"),core:iff(map:contains($core:auto-converted,$string),$core:auto-converted($string),core:iff(core:geq(string(number($string)),"NaN"),concat("n.string(",$env:QUOT,replace($string,"\\","\\\\"),$env:QUOT,")"),core:iff(matches($string,"\."),concat("n.decimal(",$string,")"),concat("n.integer(",$string,")"))))))))));
core:define($,core:serialize,(),(core:item($,value),core:item($,params)),core:item(),(core:iff(core:instance-of($params,core:string()),concat("serialize(",$value,",",$params,")"),core:iff(core:instance-of($value,core:map(core:string(),core:item()?)),concat($value("name"),core:iff(map:contains($value,"args"),core:serialize($value("args"),$params),"()"),core:iff(map:contains($value,"suffix"),$value("suffix"),"")),core:iff(core:instance-of($value,core:array(core:item()?)),a:fold-left-at($value,"",core:anon($,(core:item($,pre),core:item($,cur),core:item($,at)),core:item(),((core:item($,is-seq,(core:and(core:instance-of($cur,core:map(core:string(),core:item()?)),core:eq($cur("name"),"")))),concat($pre,core:iff(core:and(core:ggt($at,1),core:geq($is-seq,false())),",",""),core:serialize($cur,$params)))))),core:convert($value,$params))))));
core:define($,core:resolve-function,(),(core:item($,frame),core:item($,name)),core:item(),(concat("resolveFunction(",$frame,",",$name,")")));
core:define($,core:resolve-function,(),(core:item($,frame),core:item($,name),core:item($,self)),core:item(),(concat("resolveFunction(",$frame,",",$name,",",$self,")")));
core:define($,core:module,(),(core:item($,frame),core:item($,prefix),core:item($,ns),core:item($,desc)),core:item(),(concat("/*module namespace ",rdl:clip($prefix),"=",$ns,";",$env:LF,$desc,"*/")));
core:define($,core:namespace,(),(core:item($,frame),core:item($,prefix),core:item($,ns)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("namespace(",$frame,",",$prefix,",",$ns,")"),concat("//declare namespace ",rdl:clip($prefix)," = ",$ns))));
core:define($,core:ximport,(),(core:item($,frame),core:item($,prefix),core:item($,ns)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("ximport(",$frame,",",$prefix,",",$ns,")"),concat("import * as ",rdl:clip($prefix)," from ",$ns))));
core:define($,core:ximport,(),(core:item($,frame),core:item($,prefix),core:item($,ns),core:item($,loc)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("ximport(",$frame,",",$prefix,",",$ns,",",$loc,")"),concat("import * as ",rdl:clip($prefix)," from ",replace($loc,concat("(\.xql|\.rdl)",$env:QUOT,"$"),concat(".js",$env:QUOT)),""))));
core:define($,core:anon-name,(),(core:item($,frame),core:item($,name),core:item($,arity),core:item($,default-prefix)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("anonName(",$frame,",",$name,",",$arity,",",$default-prefix,")"),(core:item($,prefix,$frame("$prefix")),core:item($,p,tokenize($name,":")),core:item($,prefix,core:iff(core:eq(core:filter($p,(core:geq(position(.),core:subtract(last(.),1)))),$prefix),(),core:iff(core:filter($p,(core:geq(position(.),core:subtract(last(.),1)))),core:filter($p,(core:geq(position(.),core:subtract(last(.),1)))),$default-prefix))),concat("",rdl:camel-case($prefix),core:iff($prefix,".",""),rdl:camel-case(core:filter($p,(core:geq(position(.),last(.))))))))));
core:define($,core:xvar,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,body)),core:item(),(concat("export const ",$name," = ",$body,";")));
core:define($,core:define,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,args),core:item($,type)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("define(",$frame,",",$name,",",$def,",",$args,",",$type,")"),core:define($frame,$name,$def,$args,$type,""))));
core:define($,core:define-private,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,args),core:item($,type),core:item($,body)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("definePrivate(",$frame,",",$name,",",$def,",",$args,",",$type,",",$body,")"),core:define($frame,$name,$def,$args,$type,$body,true()))));
core:define($,core:define,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,args),core:item($,type),core:item($,body)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("define(",$frame,",",$name,",",$def,",",$args,",",$type,",",$body,")"),core:define($frame,$name,$def,$args,$type,$body,false()))));
core:define($,core:cardinality,(),(core:item($,a)),core:item(),(core:iff(core:instance-of($a,core:string()),concat("cardinality(",$a,")"),(core:item($,suffix,$a(1)),core:item($,card,core:iff(core:eq($suffix,"+"),"n.oneOrMore",core:iff(core:eq($suffix,"*"),"n.zeroOrMore",core:iff(core:eq($suffix,"?"),"n.zeroOrOne","")))),$card))));
core:define($,core:composite-type,(),(core:item($,composite)),core:item(),(core:iff(core:instance-of($composite,core:string()),concat("composite-type(",$composite,")"),string-join(array:flatten(array:for-each($composite,core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:string()),core:cardinality(core:array(($_))),core:iff(core:eq($_("name"),""),concat("(",core:composite-type($_("args")),")"),concat(replace($_("name"),"core:","\$."),"(",core:cardinality(core:array(($_("suffix")))),")"))))))),","))));
core:define($,core:define,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,args),core:item($,type),core:item($,body),core:item($,private)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("define(",$frame,",",$name,",",$def,",",$args,",",$type,",",$body,",",$private,")"),(core:item($,arity,array:size($args)),core:item($,has-rest-param),core:item($,last,$args($arity)),core:iff(core:instance-of($last,core:map(core:string(),core:item()?)),matches($last("args")(2),"^\.{3}"),matches($last,"^\.{3}")))),core:item($,arity,core:iff($has-rest-param,"",$arity)),core:item($,init,array:for-each($args,core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item()?)),(core:item($,args,$_("args")),core:item($,param,$args(2)),core:item($,param,core:iff(matches($param,"^\p{N}+$"),$param,concat($env:QUOT,rdl:camel-case($param),$env:QUOT))),core:item($,card,core:cardinality(core:array(($_("suffix"))))),concat(replace(replace($_("name"),"core:",concat($env:TAB,".")),"function","func"),"(",$param,core:iff(core:gt(array:size($args),2),concat(",",core:composite-type(array:subarray($args,3))),""),core:iff(core:ne($card,""),concat(",",$card),""),")")),core:iff(core:instance-of($_,core:string()),concat("$.item(",$_,")"),$_)))))),core:item($,init,string-join(array:flatten($init),concat($env:LF,$env:TAB))),core:item($,parts,tokenize(rdl:clip($name),":")),core:item($,fname,rdl:camel-case(core:filter($parts,(core:geq(position(.),last(.)))))),core:item($,aname,concat($fname,"$",$arity)),concat(core:iff($private,"","export "),"function ",$aname,"(...$_a) {",$env:LF,$env:TAB,"var $ = n.frame($_a)",$env:LF,$env:TAB,$init,";",$env:LF,$env:TAB,core:iff(core:eq($body,""),concat("return ",core:filter($parts,(core:geq(position(.),1))),".",$fname,".apply(this,$_a);"),$body),$env:LF,"}")));
core:define($,core:describe,(),(core:item($,frame),core:item($,name),core:item($,def),core:item($,args),core:item($,type)),core:item(),("n.map()"));
core:define($,core:anon,(),(core:item($,frame),core:item($,args),core:item($,type),core:item($,body)),core:item(),(core:iff(core:instance-of($frame,core:string()),concat("anon(",$args,",",$type,",",$body,")"),(core:item($,init,array:flatten(a:for-each($args,core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item()?)),(core:item($,args,$_("args")),core:item($,param,concat($env:QUOT,rdl:camel-case($args(2)),$env:QUOT)),core:item($,composite,array:flatten(array:subarray($args,3))),core:item($,card,core:cardinality(core:array(($_("suffix"))))),concat(replace($_("name"),"core:",concat($env:TAB,".")),"(",$param,for-each($composite,core:anon($,(core:item($,_)),core:item(),(concat(",",replace($_("name"),"core:","\$."),"(",core:cardinality(core:array(($_("suffix")))),")")))),core:iff(core:ne($card,""),concat(",",$card),""),")")),core:iff(core:instance-of($_,core:string()),concat("$.item(",$_,")"),$_))))))),concat("function (...$_a) {",$env:LF,$env:TAB,"$ = $.frame($_a)",$env:LF,$env:TAB,string-join($init,concat($env:LF,$env:TAB)),";",$env:LF,$env:TAB,$body,$env:LF,"}")))));
core:define($,core:let-ret,(),(core:item($,a),core:item($,let-seq),core:item($,seqtype)),core:item(),(core:iff(core:instance-of($a,core:string()),concat("letRet(",$a,",",$let-seq,",",$seqtype,")"),(core:item($,size,array:size($a)),string-join(array:flatten(a:for-each-at($a,core:anon($,(core:item($,_),core:item($,at)),core:item(),((core:item($,_,core:iff(core:instance-of($_,core:array(core:item()?)),concat("n.seq(",string-join(array:flatten($_),","),")"),$_)),core:iff(core:lt($at,$size),concat("$ = ",$_),concat("return ",core:iff($seqtype,concat(substring($seqtype,1,core:subtract(string-length($seqtype),1)),$_,")"),$_),";",$env:LF,$env:TAB))))))),concat(";",$env:LF,$env:TAB))))));
core:define($,core:iff,(),(core:item($,a),core:item($,b),core:item($,c)),core:item(),((core:item($,d,concat($env:LF,$env:TAB)),concat("($ => {",$d,"if($.test(",$a,")) {",$d,core:iff(matches($b,"^return|^\$ ="),$b,concat("return ",$b,";",$env:LF)),"} else {",$d,core:iff(matches($c,"^return|^\$ ="),$c,concat("return ",$c,";",$env:LF)),"}",$d,"})($.frame())"))));
core:define($,core:typegen1,(),(core:item($,type),core:item($,seq)),core:item(),(concat("n.",$type,"(",$seq,")")));
core:define($,core:typegen1,(),(core:item($,type),core:item($,name),core:item($,seq)),core:item(),(concat("n.",$type,"(",$name,",",$seq,")")));
core:define($,core:typegen2,(),(core:item($,type)),core:item(),($type));
core:define($,core:typegen2,(),(core:item($,type),core:item($,keytype),core:item($,valtype),core:item($,body)),core:item(),(concat("n.map(",$body,")")));
core:define($,core:typegen2,(),(core:item($,type),core:item($,keytype),core:item($,valtype)),core:item(),(concat("n.",$type,"()")));
core:define($,core:typegen2,(),(core:item($,type),core:item($,seq)),core:item(),(core:iff(core:eq($type,"map"),concat("n.map(",$seq,")"),())));
core:define($,core:_typegen,(),(core:item($,args)),core:item(),(core:iff(core:instance-of($args,core:string()),concat("_typegen(",$args,")"),(core:item($,l,array:size($args)),core:iff(core:eq($l,2),concat("n.",$args(1),"(",$args(2),")"),(core:item($,param,rdl:camel-case(rdl:clip($args(2)))),core:iff($args(3),concat("$(",$env:QUOT,$param,$env:QUOT,",",$args(3),")"),concat("$(",$env:QUOT,replace($param,"^([^\.]*)(\.{3})$","$2 $1"),$env:QUOT,")"))))))));
core:define($,core:typegen,(),(core:item($,type)),core:item(),(core:_typegen(core:array(($type,"")))));
core:define($,core:typegen,(),(core:item($,type),core:item($,val)),core:item(),(core:_typegen(core:array(($type,$val)))));
core:define($,core:typegen,(),(core:item($,type),core:item($,frame),core:item($,name)),core:item(),(core:_typegen(core:array(($type,$name,(),"")))));
core:define($,core:typegen,(),(core:item($,type),core:item($,frame),core:item($,name),core:item($,val)),core:item(),(core:_typegen(core:array(($type,$name,$val,"")))));
core:define($,core:typegen,(),(core:item($,type),core:item($,frame),core:item($,name),core:item($,val),core:item($,suffix)),core:item(),(core:_typegen(core:array(($type,$name,$val,$suffix)))))