core:xq-version($,"3.1");
core:module($,rdl,"http://raddle.org/raddle",());
core:ximport($,xqc,"http://raddle.org/xquery-compat","../lib/xq-compat.xql");
core:ximport($,n,"http://raddle.org/native-xq","../lib/n.xql");
core:ximport($,a,"http://raddle.org/array-util","../lib/array-util.xql");
core:ximport($,console,"http://exist-db.org/xquery/console");
core:xvar($,$rdl:suffix,(),"\+\*\-\?");
core:xvar($,$rdl:ncname,(),$xqc:ncname);
core:xvar($,$rdl:chars,(),core:concat(core:concat($rdl:suffix,$rdl:ncname),"\$%/#@\^:"));
core:xvar($,$rdl:paren-regexp,(),concat("(\)[",$rdl:suffix,"]?)|(",$xqc:operator-regexp,"|,)?([",$rdl:chars,"]*)(\(?)"));
core:xvar($,$rdl:protocol-regexp,(),"^((http[s]?|ftp|xmldb|xmldb:exist|file):/)?/*(.*)$");
core:define($,rdl:map-put,(),(core:item($,map),core:item($,key),core:item($,val)),core:item(),(map:new(($map,core:map((core:pair($key,$val)))))));
core:define($,rdl:parse-strings,(),(core:item($,strings),core:item($,normalizer),core:item($,params)),core:item(),((core:item($,string,$strings("$%0")),core:item($,string,$normalizer($string,$params)),core:item($,parts,tokenize($string,";")),array:join(for-each($parts,core:anon($,(core:item($,block)),core:item(),(rdl:wrap(core:select(analyze-string($block,$rdl:paren-regexp),fn:match),$strings))))))));
core:define($,rdl:rql-compat,(),(core:item($,query),core:item($,params)),core:item(),((core:item($,query,replace($query,"&amp;"," and ")),$query)));
core:define($,rdl:normalize-query,(),(core:string($,query)?,core:item($,params)),core:item(),(replace($query,"\s","")));
core:define($,rdl:process-strings,(),(core:item($,strings),core:item($,ret),core:item($,index)),core:item(),(core:iff(empty($strings),$ret,(core:item($,head,head($strings)),core:iff(core:eq(name($head),"match"),(core:item($,string,core:select($head,(string(.)))),core:item($,index,core:iff(map:contains($ret,$string),$index,core:add($index,1))),core:item($,key,core:concat("$%",$index)),core:item($,ret,map:put($ret,$key,concat("&quot;",rdl:clip-string($string),"&quot;"))),core:item($,ret,map:put($ret,"$%0",concat($ret("$%0"),$key))),rdl:process-strings(tail($strings),$ret,$index)),(core:item($,ret,map:put($ret,"$%0",concat($ret("$%0"),core:select($head,(string(.)))))),rdl:process-strings(tail($strings),$ret,$index)))))));
core:define($,rdl:parse,(),(core:string($,query)?),core:item(),(rdl:parse($query,core:map(()))));
core:define($,rdl:parse,(),(core:string($,query)?,core:item($,params)),core:item(),((core:item($,strings,rdl:process-strings(core:select(analyze-string($query,"('[^']*')|(&quot;[^&quot;]*&quot;)"),*),core:map((core:pair("$%0",""))),1)),rdl:parse-strings($strings,core:iff(core:geq($params("$compat"),"xquery"),core:anon($,(core:item($,query),core:item($,params)),core:item(),(rdl:normalize-query(xqc:normalize-query(rdl:rql-compat($query,$params),$params),$params))),rdl:normalize-query#2),$params))));
core:define($,rdl:get-index-from-tokens,(),(core:item($,tok)),core:item(),(for-each(core:to(1,count(index-of($tok,1))),core:anon($,(core:item($,i)),core:item(),((core:item($,x,core:filter(index-of($tok,core:minus(1)),(core:geq(position(.),$i)))),core:item($,y,core:filter(index-of($tok,1),(core:geq(position(.),$i)))),core:iff(core:and(exists($x),core:glt($x,$y)),(),core:add($y,1))))))));
core:define($,rdl:get-index,(),(core:item($,rest)),core:item(),(core:filter(rdl:get-index-from-tokens(for-each($rest,core:anon($,(core:item($,_)),core:item(),((core:item($,_,core:select(core:select($_,core:select(.,fn:group)),core:select(.,@nr))),core:iff(core:geq($_,1),1,core:iff(core:geq($_,4),core:minus(1),0))))))),(core:geq(position(.),1)))));
core:define($,rdl:clip-string,(),(core:string($,str)),core:item(),(substring($str,2,core:subtract(string-length($str),2))));
core:define($,rdl:value-from-strings,(),(core:string($,val)?,core:item($,strings)),core:item(),(core:iff($val,core:iff(matches($val,"\$%[0-9]+"),$strings($val),$val),"")));
core:define($,rdl:upsert,(),(core:item($,ret),core:item($,index),core:item($,val)),core:item(),(core:iff(core:lt(array:size($ret),$index),array:append($ret,core:array(($val))),a:put($ret,$index,array:append($ret($index),$val)))));
core:define($,rdl:wrap-qname,(),(core:item($,args)),core:item(),(core:iff(core:instance-of($args,core:map(core:string(),core:item())),core:map((core:pair("name",$args("name")),core:pair("args",array:for-each($args("args"),core:anon($,(core:item($,arg)),core:item(),(core:iff(core:and(core:instance-of($arg,core:string()),matches($arg,$xqc:qname)),core:map((core:pair("name","core:select"),core:pair("args",core:array((".",$arg))),core:pair("suffix",""))),rdl:wrap-qname($arg)))))),core:pair("suffix",""))),core:iff(core:instance-of($args,core:array(core:item())),array:for-each($args,core:anon($,(core:item($,arg)),core:item(),(core:iff(core:and(core:instance-of($arg,core:string()),matches($arg,$xqc:qname)),core:map((core:pair("name","core:select"),core:pair("args",core:array((".",$arg))),core:pair("suffix",""))),rdl:wrap-qname($arg))))),$args))));
core:define($,rdl:find-context-item,(),(core:item($,value)),core:item(),(core:iff(core:eq(array:size($value),0),(),(core:item($,cx,array:filter($value,core:anon($,(core:item($,_)),core:item(),(core:and(core:instance-of($_,core:string()),matches($_,"^\.$")))))),core:iff(core:gt(array:size($cx),0),array:flatten($cx),array:flatten(a:for-each-at($value,core:anon($,(core:item($,_),core:item($,at)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item())),core:iff(core:geq($_("name"),("","last","fn:last")),(),core:iff(core:eq($_("name"),"core:filter"),rdl:find-context-item(core:array(($_("args")(1)))),rdl:find-context-item($_("args")))),()))))))))));
core:define($,rdl:wrap,(),(core:item($,match),core:item($,strings)),core:item(),(rdl:wrap($match,$strings,core:array(()))));
core:define($,rdl:wrap,(),(core:item($,match),core:item($,strings),core:item($,ret)),core:item(),(rdl:wrap($match,$strings,$ret,1)));
core:define($,rdl:wrap,(),(core:item($,match),core:item($,strings),core:item($,ret),core:item($,depth)),core:item(),(rdl:wrap($match,$strings,$ret,$depth,false())));
core:define($,rdl:wrap,(),(core:item($,match),core:item($,strings),core:item($,ret),core:item($,depth),core:item($,was-comma)),core:item(),(core:iff(empty($match),$ret(1),(core:item($,group,core:select(head($match),fn:group)),core:item($,rest,tail($match)),core:item($,separator,core:select(core:filter($group,(core:geq(core:select(.,@nr),2))),(string(.)))),core:item($,value,rdl:value-from-strings(core:select(core:filter($group,(core:geq(core:select(.,@nr),3))),(string(.))),$strings)),core:item($,is-comma,matches($separator,",")),core:item($,is-op,core:and(core:geq($is-comma,false()),matches($separator,core:concat($xqc:operator-regexp,"+")))),core:item($,op,core:iff($is-op,xqc:op-num($separator),())),core:iff(core:geq(core:select($group,@nr),4),(core:item($,ret,core:iff($is-comma,rdl:upsert($ret,$depth,core:map((core:pair("name",$value),core:pair("args",core:array(())),core:pair("suffix","")))),core:iff($is-op,(core:item($,operator,xqc:to-op($op)),core:item($,dest,core:iff(core:lt(array:size($ret),$depth),core:array(()),$ret($depth))),core:item($,len,array:size($dest)),core:item($,last,core:iff(core:gt($len,0),$dest($len),())),core:item($,filter,core:eq($op,20.01)),core:item($,filter-context,core:iff(core:and($filter,core:gt($depth,1)),(core:item($,prev,$ret(core:subtract($depth,1))),core:item($,s,array:size($prev)),$prev($s)),())),core:item($,select-filter,core:and(core:instance-of($filter-context,core:map(core:string(),core:item())),core:eq($filter-context("op"),19.01))),core:iff(core:or(core:geq($op,$xqc:lr-op),(core:and($filter,core:eq($select-filter,false())))),(core:item($,args,core:iff(core:and(core:geq($op,(19.01,20.01)),core:eq($value,"")),core:array(()),core:array((core:map((core:pair("name",$value),core:pair("args",core:array(())),core:pair("suffix",""))))))),core:item($,prev-op,core:iff(core:and(core:instance-of($last,core:map(core:string(),core:item())),map:contains($last,"op")),$last("op"),())),core:item($,has-preceding-op,core:and(exists($prev-op),core:geq($prev-op,$xqc:lr-op))),core:item($,is-unary-op,core:iff(core:geq(round($op),(8,17)),core:or($was-comma,$has-preceding-op),false())),core:item($,preceeds,core:and($has-preceding-op,core:gt(round($op),round($prev-op)))),core:iff($is-unary-op,(core:item($,operator,xqc:to-op(xqc:unary-op($op))),core:item($,dest,core:iff(core:and($preceeds,core:lt(array:size($last("args")),2)),a:put($dest,$len,map:put($last,"args",core:array(($last("args")(1),core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op),core:pair("nest",core:ne($value,"")))))))),array:append($dest,core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op),core:pair("nest",core:ne($value,""))))))),a:put($ret,$depth,$dest)),core:iff($preceeds,(core:item($,args,array:insert-before($args,1,$last("args")(2))),core:item($,dest,a:put($dest,$len,core:map((core:pair("name",$last("name")),core:pair("args",core:array(($last("args")(1),core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op)))))),core:pair("nest",true()),core:pair("suffix",""),core:pair("op",$prev-op))))),a:put($ret,$depth,$dest)),(core:item($,args,array:insert-before($args,1,$last)),core:item($,dest,a:put($dest,$len,core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op),core:pair("nest",core:ne($value,"")))))),a:put($ret,$depth,$dest))))),core:iff(core:ne($value,""),(core:item($,args,core:array(($last,core:map((core:pair("name",$value),core:pair("args",core:array(())),core:pair("suffix","")))))),core:item($,dest,a:put($dest,$len,core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op),core:pair("nest",core:ne($value,"")))))),a:put($ret,$depth,$dest)),rdl:upsert($ret,$depth,core:map((core:pair("name",$operator),core:pair("args",core:array(())),core:pair("suffix",""),core:pair("op",$op))))))),rdl:upsert($ret,$depth,core:map((core:pair("name",$value),core:pair("args",core:array(())),core:pair("suffix",""),core:pair("call",core:and(core:ge(array:size($ret),$depth),core:eq($value,""))))))))),rdl:wrap($rest,$strings,$ret,core:add($depth,1),core:and($is-comma,core:eq($value,"")))),core:iff(core:or(core:or($value,$is-comma),$is-op),(core:item($,ret,core:iff($is-op,core:iff(core:lt(array:size($ret),$depth),(core:item($,op,xqc:unary-op($op)),core:item($,args,core:iff(core:ne($value,""),core:array(($value)),core:array(()))),core:item($,operator,xqc:to-op($op)),array:append($ret,core:array((core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op))))))),(core:item($,dest,$ret($depth)),core:item($,len,array:size($dest)),core:item($,last,$dest($len)),core:item($,prev-op,core:iff(core:and(core:instance-of($last,core:map(core:string(),core:item())),map:contains($last,"op")),$last("op"),())),core:item($,has-preceding-op,core:and(exists($prev-op),core:geq($prev-op,$xqc:lr-op))),core:item($,is-unary-op,core:iff(core:geq(round($op),(8,17)),core:or($was-comma,$has-preceding-op),false())),core:item($,preceeds,core:and($has-preceding-op,core:gt(round($op),round($prev-op)))),core:item($,op,core:iff($is-unary-op,xqc:unary-op($op),$op)),core:item($,operator,xqc:to-op($op)),core:item($,dest,core:iff($is-unary-op,(core:item($,args,core:iff(core:ne($value,""),core:array(($value)),core:array(()))),core:iff(core:and($preceeds,core:lt(array:size($last("args")),2)),a:put($dest,$len,map:put($last,"args",core:array(($last("args")(1),core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op))))))),array:append($dest,core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op)))))),core:iff($preceeds,(core:item($,args,core:array(($last("args")(2)))),core:item($,args,core:iff(core:ne($value,""),array:append($args,$value),$args)),core:item($,next,map:put($last,"args",core:array(($last("args")(1),core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op))))))),a:put($dest,$len,$next)),(core:item($,args,core:iff(core:ne($value,""),core:array(($last,$value)),core:array(($last)))),a:put($dest,$len,core:map((core:pair("name",$operator),core:pair("args",$args),core:pair("suffix",""),core:pair("op",$op)))))))),a:put($ret,$depth,$dest))),core:iff(core:ne($value,""),rdl:upsert($ret,$depth,$value),$ret))),rdl:wrap($rest,$strings,$ret,$depth,core:and($is-comma,core:eq($value,"")))),core:iff(core:geq(core:select($group,@nr),1),core:iff(core:or(core:lt(array:size($ret),$depth),core:lt($depth,2)),rdl:wrap($rest,$strings,$ret,core:subtract($depth,1)),(core:item($,args,$ret($depth)),core:item($,dest,$ret(core:subtract($depth,1))),core:item($,len,array:size($dest)),core:item($,last,$dest($len)),core:item($,s,array:size($last("args"))),core:item($,next,core:iff(core:gt($s,0),$last("args")($s),())),core:item($,nest,core:and(core:instance-of($next,core:map(core:string(),core:item())),(core:or($last("nest"),core:eq($next("name"),""))))),core:item($,op,core:iff($nest,$next("op"),core:iff(core:instance-of($last,core:map(core:string(),core:item())),$last("op"),()))),core:item($,args,core:iff($nest,(core:item($,ns,array:size($next("args"))),core:item($,maybeseq,core:iff(core:gt($ns,0),$next("args")($ns),())),core:item($,is-seq,core:and(core:and(core:instance-of($maybeseq,core:map(core:string(),core:item())),core:ne($op,19.01)),core:eq(map:contains($maybeseq,"op"),false()))),core:iff($is-seq,a:put($next("args"),$ns,map:put($maybeseq,"args",array:join(($maybeseq("args"),$args)))),array:join(($next("args"),$args)))),array:join(($last("args"),$args)))),core:item($,args,core:iff(core:eq($op,19.01),array:for-each($args,core:anon($,(core:item($,_)),core:item(),(core:iff(core:instance-of($_,core:map(core:string(),core:item())),core:iff(core:eq($_("name"),""),$_,core:iff(core:geq(rdl:find-context-item(core:array(($_))),"."),core:map((core:pair("name",""),core:pair("args",core:array(($_))),core:pair("suffix",""))),$_)),$_)))),core:iff(core:eq($op,20.01),(core:item($,is-implicit,core:eq(array:size($args),1)),core:item($,first,core:iff($is-implicit,".",(core:item($,first,$args(1)),core:iff(core:geq(rdl:find-context-item(core:array(($first))),"."),$first,rdl:wrap-qname(core:array(($first)))(1))))),core:item($,second,core:iff($is-implicit,$args(1),$args(2))),core:item($,second,core:iff(core:geq(rdl:find-context-item(core:array(($second))),"."),$second,rdl:wrap-qname(core:array(($second)))(1))),core:item($,second,core:iff(core:geq(rdl:find-context-item(core:array(($second))),"."),$second,core:map((core:pair("name","core:geq"),core:pair("args",core:array((core:map((core:pair("name","position"),core:pair("args",core:array(("."))),core:pair("suffix",""))),$second))),core:pair("suffix",""))))),core:item($,second,core:map((core:pair("name",""),core:pair("args",core:array(($second))),core:pair("suffix","")))),core:array(($first,$second))),$args))),core:item($,dest,core:iff($nest,(core:item($,val,core:map((core:pair("name",$next("name")),core:pair("args",$args),core:pair("suffix","")))),a:put($dest,$len,core:map((core:pair("name",$last("name")),core:pair("args",a:put($last("args"),$s,$val)),core:pair("suffix",replace(core:select($group,(string(.))),"\)","")),core:pair("op",$last("op")),core:pair("nest",$last("nest")))))),(core:item($,val,core:map((core:pair("name",$last("name")),core:pair("args",$args),core:pair("suffix",replace(core:select($group,(string(.))),"\)","")),core:pair("call",$last("call"))))),a:put($dest,$len,$val)))),rdl:wrap($rest,$strings,array:append(array:subarray($ret,1,core:subtract($depth,2)),$dest),core:subtract($depth,1)))),$ret(1))))))));
core:define($,rdl:import-module,(),(core:item($,name),core:item($,params)),core:item(),((core:item($,mappath,core:iff(map:contains($params,"modules"),$params("modules"),"modules.xml")),core:item($,map,core:select(core:select(doc($mappath),root),module)),core:item($,location,core:anyURI(core:select(core:filter($map,(core:geq(core:select(.,@name),$name))),@location))),core:item($,uri,core:anyURI(core:select(core:filter($map,(core:geq(core:select(.,@name),$name))),@uri))),core:item($,module,core:iff($location,inspect:inspect-module($location),inspect:inspect-module-uri($uri))),n:try(util:import-module(core:anyURI(core:select($module,@uri)),core:select($module,@prefix),core:anyURI(core:select($module,@location))),()))));
core:define($,rdl:stringify,(),(core:item($,a),core:item($,params)),core:item(),(rdl:stringify($a,$params,true())));
core:define($,rdl:stringify,(),(core:item($,a),core:item($,params),core:item($,top)),core:item(),((core:item($,s,array:size($a)),a:fold-left-at($a,"",core:anon($,(core:item($,acc),core:item($,t),core:item($,i)),core:item(),((core:item($,is-map,core:instance-of($t,core:map(core:string(),core:item()))),core:item($,ret,core:iff($is-map,concat($t("name"),"(",string-join(array:flatten(rdl:stringify($t("args"),$params,false())),","),")",core:iff(core:instance-of($t("suffix"),core:string()),$t("suffix"),"")),core:iff(core:instance-of($t,core:array(core:item())),concat("(",rdl:stringify($t,$params,false()),")"),$t))),concat($acc,core:iff(core:gt($i,1),core:iff($top,";&#10;&#13;",core:iff(core:and($is-map,$t("call")),"",",")),""),$ret))))))));
core:define($,rdl:transpile,(),(core:item($,tree),core:item($,lang),core:item($,params)),core:item(),((core:item($,module,n:import(core:concat(core:concat("../lib/",$lang),".xql"))),core:item($,frame,map:put($params,"$imports",core:map((core:pair("core",$module))))),core:item($,func,$module("$exports")("core:transpile#2")),$func($tree,$frame))));
core:define($,rdl:exec,(),(core:item($,query),core:item($,params)),core:item(),((core:item($,core,n:import("../lib/core.xql")),core:item($,n,n:import("../lib/n.xql")),core:iff(map:contains($params,"$transpile"),core:iff(core:eq($params("$transpile"),"rdl"),rdl:stringify(rdl:parse($query,$params),$params),rdl:transpile(rdl:parse($query,$params),$params("$transpile"),$params)),(core:item($,frame,map:put($params,"$imports",core:map((core:pair("core",$core),core:pair("n",$n))))),core:item($,fn,n:eval(rdl:parse($query,$params))),$fn($frame))))));
core:define($,rdl:clip,(),(core:item($,name)),core:item(),(core:iff(matches($name,"^&quot;.*&quot;$"),rdl:clip-string($name),$name)));
core:define($,rdl:camel-case,(),(core:item($,name)),core:item(),((core:item($,p,tokenize($name,"\-")),core:concat(head($p),string-join(for-each(tail($p),core:anon($,(core:item($,_)),core:item(),((core:item($,c,string-to-codepoints($_)),concat(upper-case(codepoints-to-string(head($c))),codepoints-to-string(tail($c))))))))))));
core:define($,rdl:capitalize,(),(core:item($,str)),core:item(),((core:item($,cp,string-to-codepoints($str)),codepoints-to-string((string-to-codepoints(upper-case(codepoints-to-string(head($cp)))),tail($cp))))))