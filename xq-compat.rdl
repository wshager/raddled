core:xq-version($,"3.1");

core:module($,xqc,"http://raddle.org/xquery-compat",());

core:ximport($,console,"http://exist-db.org/xquery/console");

core:xvar($,$xqc:ncname,(),"\p{L}\p{N}\-_\.@");

core:xvar($,$xqc:qname,(),core:concat(core:concat(core:concat(core:concat(core:concat("^(\p{L}|@)[",$xqc:ncname),"]*:?"),"["),$xqc:ncname),"]*"));

core:xvar($,$xqc:operator-regexp,(),"=#\p{N}+#?\p{N}*=");

core:xvar($,$xqc:operators,(),core:map((core:pair(1,","),core:pair(2.01,"some"),core:pair(2.02,"every"),core:pair(2.03,"switch"),core:pair(2.04,"typeswitch"),core:pair(2.05,"try"),core:pair(2.06,"if"),core:pair(2.07,"then"),core:pair(2.08,"else"),core:pair(2.09,"let"),core:pair(2.10,":="),core:pair(2.11,"return"),core:pair(2.12,"case"),core:pair(2.13,"default"),core:pair(2.14,"xquery"),core:pair(2.15,"version"),core:pair(2.16,"module"),core:pair(2.17,"declare"),core:pair(2.18,"variable"),core:pair(2.19,"import"),core:pair(3,"or"),core:pair(4,"and"),core:pair(5.01,"eq"),core:pair(5.02,"ne"),core:pair(5.03,"lt"),core:pair(5.04,"le"),core:pair(5.05,"gt"),core:pair(5.06,"ge"),core:pair(5.07,"="),core:pair(5.08,"!="),core:pair(5.09,"<="),core:pair(5.10,">="),core:pair(5.11,"<<"),core:pair(5.12,">>"),core:pair(5.13,"<"),core:pair(5.14,">"),core:pair(5.15,"is"),core:pair(6,"||"),core:pair(7,"to"),core:pair(8.01,"+"),core:pair(8.02,"-"),core:pair(9.01,"*"),core:pair(9.02,"idiv"),core:pair(9.03,"div"),core:pair(9.04,"mod"),core:pair(10.01,"union"),core:pair(10.02,"|"),core:pair(11.01,"intersect"),core:pair(11.02,"except"),core:pair(12,"instance of"),core:pair(13,"treat as"),core:pair(14,"castable as"),core:pair(15,"cast as"),core:pair(16,"=>"),core:pair(17.01,"+"),core:pair(17.02,"-"),core:pair(18,"!"),core:pair(19.01,"/"),core:pair(20.01,"["),core:pair(20.02,"]"),core:pair(20.03,"?"),core:pair(20.04,"["),core:pair(20.06,"{"),core:pair(20.07,"}"),core:pair(21.01,"array"),core:pair(21.02,"attribute"),core:pair(21.03,"comment"),core:pair(21.04,"document"),core:pair(21.05,"element"),core:pair(21.06,"function"),core:pair(21.07,"map"),core:pair(21.08,"namespace"),core:pair(21.09,"processing-instruction"),core:pair(21.10,"text"),core:pair(22.01,"array"),core:pair(22.02,"attribute"),core:pair(22.03,"comment"),core:pair(22.04,"document-node"),core:pair(22.05,"element"),core:pair(22.06,"empty-sequence"),core:pair(22.07,"function"),core:pair(22.08,"item"),core:pair(22.09,"map"),core:pair(22.10,"namespace-node"),core:pair(22.11,"node"),core:pair(22.12,"processing-instruction"),core:pair(22.13,"schema-attribute"),core:pair(22.14,"schema-element"),core:pair(22.15,"text"),core:pair(24,"as"),core:pair(25.01,"(:"),core:pair(25.02,":)"),core:pair(26,":"))));

core:xvar($,$xqc:operators-i,(),fold-left(map:keys($xqc:operators),core:map(()),core:anon($,(core:item($,pre),core:item($,cur)),core:item(),(map:put($pre,$xqc:operators($cur),$cur)))));

core:xvar($,$xqc:types,(),("untypedAtomic","dateTime","dateTimeStamp","date","time","duration","yearMonthDuration","dayTimeDuration","float","double","decimal","integer","nonPositiveInteger","negativeInteger","long","int","short","byte","nonNegativeInteger","unsignedLong","unsignedInt","unsignedShort","unsignedByte","positiveInteger","gYearMonth","gYear","gMonthDay","gDay","gMonth","string","normalizedString","token","language","NMTOKEN","Name","NCName","ID","IDREF","ENTITY","boolean","base64Binary","hexBinary","anyURI","QName","NOTATION"));

core:xvar($,$xqc:operator-map,(),core:map((core:pair(2.06,"iff"),core:pair(2.09,"item"),core:pair(5.01,"eq"),core:pair(5.02,"ne"),core:pair(5.03,"lt"),core:pair(5.04,"le"),core:pair(5.05,"gt"),core:pair(5.06,"ge"),core:pair(5.07,"geq"),core:pair(5.08,"gne"),core:pair(5.09,"gle"),core:pair(5.10,"gge"),core:pair(5.11,"precedes"),core:pair(5.12,"follows"),core:pair(5.13,"glt"),core:pair(5.14,"ggt"),core:pair(6,"concat"),core:pair(8.01,"add"),core:pair(8.02,"subtract"),core:pair(9.01,"multiply"),core:pair(10.02,"union"),core:pair(17.01,"plus"),core:pair(17.02,"minus"),core:pair(18,"for-each"),core:pair(19.01,"select"),core:pair(20.01,"filter"),core:pair(20.03,"lookup"),core:pair(20.04,"array"),core:pair(27.01,"pair"))));

core:xvar($,$xqc:lr-op,(),(3,4,5.01,5.02,5.03,5.04,5.05,5.06,5.07,5.08,5.09,5.10,5.11,5.12,5.13,5.14,5.15,6,7,8.01,8.02,9.01,9.02,9.03,9.04,10.01,10.02,11.01,11.02,12,13,14,15,18,19.01,20.03,24));

core:xvar($,$xqc:fns,(),("position","last","name","node-name","nilled","string","data","base-uri","document-uri","number","string-length","normalize-space"));

core:define($,xqc:normalize-query,(),(core:string($,query)?,core:item($,params)),core:item(),((core:item($,query,replace(replace(replace(replace($query,"%3E",">"),"%3C","<"),"%2C",","),"%3A",":")),core:item($,query,replace($query,"([\*\+\?])\s+([,\)\{])","$1$2")),core:item($,query,fold-left(core:filter(map:keys($xqc:operators),(core:and(core:ne(.,5.07),core:ne(.,1)))),$query,core:anon($,(core:item($,cur),core:item($,next)),core:item(),(replace($cur,xqc:escape-for-regex($next),core:iff(core:eq(round($next),22),concat("$1",xqc:to-op($next),"$2"),concat("$1 ",xqc:op-str($next)," $2"))))))),core:item($,query,fold-left($xqc:types,$query,core:anon($,(core:item($,cur),core:item($,next)),core:item(),((core:item($,cur,replace($cur,concat("xs:",$next,"\s*([^\(])"),concat("core:",$next,"()$1"))),replace($cur,concat("xs:",$next,"\s*\("),concat("core:",$next,"("))))))),core:item($,query,replace($query,",","=#1=")),core:item($,query,replace($query,"=(#\p{N}+#?\p{N}*)=","%3D$1%3D")),core:item($,query,replace($query,"=","=#5#07=")),core:item($,query,replace($query,"%3D","=")),core:item($,query,replace($query,core:concat(core:concat("(",$xqc:operator-regexp),")")," $1 ")),core:item($,query,replace($query,"\s+"," ")),core:item($,query,replace($query,"=#19#01=\s*=#19#01=","=#19#01= descendant::")),core:item($,query,string-join(for-each(tokenize($query,";"),core:anon($,(core:item($,cur)),core:item(),((core:item($,parts,core:select(analyze-string($cur,"([^\s\(\),\.]+)"),*,(core:filter(.,(core:or(core:geq(name(.),fn:match),core:geq(matches(string(.),"^\s*$"),false()))))))),core:item($,ret,xqc:block($parts,"")),core:iff($ret,$ret,()))))),";")),core:item($,query,replace($query,"\s+","")),$query)));

core:define($,xqc:seqtype,(),(core:item($,parts),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,head,core:select(core:select(head($parts),fn:group,(core:filter(.,(core:geq(core:select(.,@nr),1))))),(string(.)))),core:item($,maybe-seqtype,core:iff(matches($head,$xqc:operator-regexp),xqc:op-num($head),0)),core:iff(core:eq($maybe-seqtype,20.06),xqc:body($parts,concat($ret,","),($lastseen,21.06)),xqc:seqtype(tail($parts),$ret,$lastseen)))));

core:define($,xqc:as,(),(core:item($,param),core:item($,parts),core:item($,ret),core:item($,lastseen),core:item($,subtype),core:item($,seqtype)),core:item(),((core:item($,head,core:select(head($parts),(string(.)))),core:item($,next,core:select(core:filter($parts,(core:geq(position(.),2))),(string(.)))),core:item($,no,core:iff(matches($head,$xqc:operator-regexp),xqc:op-num($head),0)),core:item($,non,core:iff(matches($next,$xqc:operator-regexp),xqc:op-num($next),0)),core:iff(core:eq($no,20.06),xqc:body($parts,concat($ret,core:iff($subtype,")",""),","),($lastseen,21.06)),core:iff(core:eq($no,24),xqc:as($param,tail($parts),concat($ret,core:iff($subtype,")",""),","),$lastseen,$subtype,true()),core:iff(core:eq($no,1),core:iff($subtype,xqc:as($param,tail($parts),concat($ret,","),$lastseen,$subtype,$seqtype),xqc:params(tail($parts),concat($ret,","),())),core:iff(matches($head,concat("core:[",$xqc:ncname,"]+")),core:iff(matches($next,"^\s*\(\s*$"),xqc:as((),subsequence($parts,3),concat($ret,$head,"(",$param,",",core:iff(core:eq($head,"core:anon"),"(","")),$lastseen,true(),$seqtype),xqc:as((),tail($parts),concat($ret,$head,"(",$param,core:iff(core:eq($head,"core:anon"),",(","")),$lastseen,$subtype,$seqtype)),core:iff(matches($head,"[\?\+\*]"),xqc:as($param,tail($parts),concat($ret,$head),$lastseen,$subtype,$seqtype),core:iff(matches($head,"^(\(\))?\s*\)"),core:iff(core:and($subtype,core:geq($non,(1,24))),xqc:as($param,tail($parts),concat($ret,core:iff(core:eq($non,24),"",")")),$lastseen,false(),$seqtype),core:iff(core:eq($non,24),xqc:as((),tail($parts),concat($ret,core:iff($subtype,")",""),"))"),$lastseen,false(),false()),core:iff(core:eq($non,20.06),xqc:body(tail($parts),concat($ret,core:iff($subtype,")",""),core:iff(matches($head,"^\(\)"),")",""),"),core:item(),"),($lastseen,21.06)),console:log(("what",$parts))))),xqc:as($param,tail($parts),concat($ret,core:iff(core:and(core:eq($non,1),$seqtype),")",""),")"),$lastseen,$subtype,$seqtype))))))))));

core:define($,xqc:params,(),(core:item($,parts),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,maybe-param,core:select(head($parts),(string(.)))),core:item($,next,core:select(core:filter($parts,(core:geq(position(.),2))),(string(.)))),core:iff(matches($maybe-param,"^\(?\s*\)"),core:iff(core:eq($next,"=#24="),xqc:as((),tail($parts),concat($ret,")"),$lastseen,false(),false()),xqc:body(tail($parts),concat($ret,"),core:item(),"),($lastseen,21.06))),core:iff(matches($maybe-param,"=#1="),xqc:params(tail($parts),concat($ret,","),$lastseen),core:iff(matches($maybe-param,"^\$"),core:iff(core:eq($next,"=#24="),xqc:as(replace($maybe-param,"^\$","\$,"),subsequence($parts,3),$ret,$lastseen,false(),false()),xqc:params(tail($parts),concat($ret,"core:item(",replace($maybe-param,"^\$","\$,"),")"),$lastseen)),xqc:params(tail($parts),$ret,$lastseen)))))));

core:define($,xqc:xfn,(),(core:item($,parts),core:item($,ret)),core:item(),(xqc:params(tail($parts),concat($ret,core:select(core:select(head($parts),fn:group,(core:filter(.,(core:geq(core:select(.,@nr),1))))),(string(.))),",(),("),())));

core:define($,xqc:ns,(),(core:item($,parts),core:item($,ret)),core:item(),((core:item($,ns,replace(core:select(head($parts),(string(.))),"\s","")),core:item($,rest,tail($parts)),string-join($rest))));

core:define($,xqc:xvar,(),(core:item($,parts),core:item($,ret)),core:item(),(xqc:body(subsequence($parts,3),concat($ret,core:select(core:filter($parts,(core:geq(position(.),1))),(string(.))),",(),"),(2.18))));

core:define($,xqc:xns,(),(core:item($,parts),core:item($,ret)),core:item(),(xqc:block(subsequence($parts,4),concat($ret,"core:namespace($,",core:filter($parts,(core:geq(position(.),1))),",",core:filter($parts,(core:geq(position(.),3))),")"))));

core:define($,xqc:annot,(),(core:item($,parts),core:item($,ret),core:item($,annot)),core:item(),((core:item($,maybe-annot,core:select(core:select(head($parts),fn:group,(core:filter(.,(core:geq(core:select(.,@nr),1))))),(string(.)))),core:item($,rest,tail($parts)),core:iff(matches($maybe-annot,"^%"),xqc:annot($rest,$ret,replace($maybe-annot,"^%","-")),core:iff(core:geq($maybe-annot,"namespace"),xqc:xns($rest,$ret),core:iff(core:geq($maybe-annot,"=#21#06="),xqc:xfn($rest,concat($ret,"core:define",$annot,"($,")),core:iff(core:geq($maybe-annot,"=#2#18="),xqc:xvar($rest,concat($ret,"core:xvar",$annot,"($,")),$ret)))))));

core:define($,xqc:xversion,(),(core:item($,parts),core:item($,ret)),core:item(),(xqc:block(subsequence($parts,3),concat($ret,"core:xq-version($,",core:select(core:filter($parts,(core:geq(position(.),2))),(string(.))),")"))));

core:define($,xqc:xmodule,(),(core:item($,parts),core:item($,ret)),core:item(),(xqc:block(subsequence($parts,5),concat($ret,"core:module($,",core:select(core:filter($parts,(core:geq(position(.),2))),(string(.))),",",core:select(core:filter($parts,(core:geq(position(.),4))),(string(.))),",())"))));

core:define($,xqc:close,(),(core:decimal($,lastseen)*,core:decimal($,no),core:decimal($,ret)*),core:item(),(core:iff(core:or(empty($lastseen),core:eq($no,0)),reverse(($ret,$lastseen)),core:iff(core:ne(head($lastseen),0.01),xqc:close(tail($lastseen),$no,(head($lastseen),$ret)),xqc:close(tail($lastseen),core:subtract($no,1),$ret)))));

core:define($,xqc:closer,(),(core:decimal($,b)*,core:integer($,c)),core:item(),(core:iff(core:and(exists($b),core:geq(head($b),(2.08,2.11))),xqc:closer(tail($b),core:add($c,1)),$c)));

core:define($,xqc:last-index-of,(),(core:decimal($,lastseen)*,core:decimal($,a)),core:item(),((core:item($,id,index-of($lastseen,$a)),core:iff(empty($id),1,core:filter($id,(core:geq(position(.),last(.))))))));

core:define($,xqc:pop,(),(core:item($,a)),core:item(),(reverse(tail(reverse($a)))));

core:define($,xqc:anon,(),(core:item($,head),core:item($,parts),core:item($,ret),core:item($,lastseen)),core:item(),(xqc:params($parts,concat($ret,"core:anon($,("),$lastseen)));

core:define($,xqc:comment,(),(core:item($,parts),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,head,core:select(head($parts),(string(.)))),core:item($,rest,tail($parts)),core:iff(core:geq($head,"=#25#02="),xqc:body($rest,$ret,$lastseen),xqc:comment($rest,$ret,$lastseen)))));

core:define($,xqc:op-let,(),(core:item($,rest),core:item($,ret),core:item($,lastseen),core:item($,llast)),core:item(),((core:item($,hascomma,core:or(core:eq($llast,2.07),(core:and(core:eq($llast,2.08),matches($ret,",$"))))),core:item($,letopener,core:or(not(core:or(core:geq($llast,(2.09,2.10)),(core:and(core:eq($llast,2.08),core:geq($hascomma,false()))))),core:eq($llast,20.06))),core:item($,letclose,core:and(not(core:or(core:eq($llast,20.06),empty($lastseen))),core:eq($hascomma,false()))),core:item($,letcloser,core:iff(core:and($letclose,core:geq($llast,(2.08,2.11,19.01))),xqc:closer(reverse($lastseen),0),0)),core:item($,ret,concat($ret,core:iff($letclose,concat(string-join(core:for-each((core:to(1,$letcloser)),")")),core:iff(core:eq(core:filter($lastseen,(core:geq(position(.),core:subtract(last(.),$letcloser)))),2.10),")",""),core:iff($hascomma,"",",")),""),core:iff($letopener,"(",""),"=#2#09=",concat("($,",replace(core:select(head($rest),(string(.))),"^\$|\s","")))),core:item($,lastseen,core:iff($letclose,subsequence($lastseen,1,core:subtract(count($lastseen),$letcloser)),$lastseen)),core:item($,lastseen,core:iff(core:and($letclose,core:eq(core:filter($lastseen,(core:geq(position(.),last(.)))),2.10)),xqc:pop($lastseen),$lastseen)),xqc:body(tail($rest),$ret,($lastseen,2.09)))));

core:define($,xqc:op-comma,(),(core:item($,rest),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,closer,xqc:closer(reverse($lastseen),0)),core:item($,lastseen,subsequence($lastseen,1,core:subtract(count($lastseen),$closer))),core:item($,ret,concat($ret,string-join(core:for-each((core:to(1,$closer)),")")),core:iff(core:eq(core:filter($lastseen,(core:geq(position(.),core:subtract(last(.),1)))),21.07),"),=#27#01=(",","))),xqc:body($rest,$ret,$lastseen))));

core:define($,xqc:op-close-curly,(),(core:item($,rest),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,lastindex,xqc:last-index-of($lastseen,20.06)),core:item($,closes,core:filter(subsequence($lastseen,$lastindex,count($lastseen)),(core:geq(.,(2.08,2.11))))),core:item($,next,core:select(head($rest),(string(.)))),core:item($,closes,core:iff(core:eq($next,"=#20#06="),$closes,($closes,2.11))),core:item($,llast,core:filter($lastseen,(core:geq(position(.),core:subtract($lastindex,1))))),core:item($,ret,concat($ret,core:iff(core:eq(round($llast),21),")",""),core:iff(core:and((core:or(core:eq($llast,21.07),empty($llast))),core:geq(matches($ret,"\($"),false())),")",""),string-join(core:for-each($closes,")")),core:iff(core:eq($next,"=#20#06="),",",""))),core:item($,lastseen,subsequence($lastseen,1,core:subtract(xqc:last-index-of($lastseen,20.06),1))),core:item($,lastseen,core:iff(core:and(core:eq(round(core:filter($lastseen,(core:geq(position(.),last(.))))),21),core:eq(core:select(head($rest),(string(.))),"=#20#06=")),$lastseen,xqc:pop($lastseen))),xqc:body($rest,$ret,$lastseen))));

core:define($,xqc:op-constructor,(),(core:item($,no),core:item($,rest),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,ret,concat($ret,xqc:op-str($no),"(")),core:item($,next,core:select(head($rest),(string(.)))),core:item($,qn,core:iff(core:ne($next,"=#20#06="),$next,())),core:item($,rest,core:iff(exists($qn),tail($rest),$rest)),core:item($,ret,core:iff(exists($qn),concat($ret,$next,","),$ret)),xqc:body($rest,$ret,($lastseen,$no)))));

core:define($,xqc:op-then-assign,(),(core:item($,no),core:item($,rest),core:item($,ret),core:item($,lastseen),core:item($,llast)),core:item(),((core:item($,ret,concat($ret,core:iff(core:eq($llast,2.11),")",""),",")),core:item($,lastseen,core:iff(core:or(core:eq($llast,2.11),(core:and(core:eq($no,2.07),core:eq($llast,0.01)))),xqc:pop($lastseen),$lastseen)),core:item($,last,core:filter(index-of($lastseen,core:subtract($no,core:decimal(0.01))),(core:geq(position(.),last(.))))),core:item($,lastseen,core:iff($last,(remove($lastseen,$last),$no),$lastseen)),xqc:body($rest,$ret,$lastseen))));

core:define($,xqc:op-else-return,(),(core:item($,no),core:item($,rest),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,closer,xqc:last-index-of($lastseen,core:subtract($no,core:decimal(0.01)))),core:item($,ret,concat($ret,string-join(core:for-each(subsequence($lastseen,core:add($closer,1)),")")),core:iff(core:eq($no,2.11),"),",","))),core:item($,lastseen,subsequence($lastseen,1,core:subtract($closer,1))),xqc:body($rest,$ret,($lastseen,$no)))));

core:define($,xqc:op-close-square,(),(core:item($,rest),core:item($,ret),core:item($,lastseen),core:item($,llast)),core:item(),((core:item($,ret,concat($ret,core:iff(core:or(core:geq($llast,(19.01,20.04)),(core:and(core:eq($llast,20.01),core:eq(core:filter($lastseen,(core:geq(position(.),core:subtract(last(.),1)))),19.01)))),"))",")"))),core:item($,lastseen,core:iff(core:or(core:geq($llast,19.01),(core:and(core:eq($llast,20.01),core:eq(core:filter($lastseen,(core:geq(position(.),core:subtract(last(.),1)))),19.01)))),xqc:pop(xqc:pop($lastseen)),xqc:pop($lastseen))),xqc:body($rest,$ret,$lastseen))));

core:define($,xqc:op-open-square,(),(core:item($,no),core:item($,rest),core:item($,ret),core:item($,lastseen)),core:item(),((core:item($,ret,concat($ret,xqc:op-str($no),core:iff(core:eq($no,20.04),"((","("))),xqc:body($rest,$ret,($lastseen,$no)))));

core:define($,xqc:op-open-curly,(),(core:item($,rest),core:item($,ret),core:item($,lastseen),core:item($,llast)),core:item(),((core:item($,ret,concat($ret,core:iff(core:or(core:eq($llast,21.07),core:ne(round($llast),21)),(core:item($,next,core:select(head($rest),(string(.)))),core:iff(core:or(empty($next),core:eq($next,"=#20#07=")),"(","(=#27#01=(")),"("))),xqc:body($rest,$ret,($lastseen,20.06)))));

core:define($,xqc:op-select,(),(core:item($,rest),core:item($,ret),core:item($,lastseen),core:item($,llast)),core:item(),((core:item($,ret,concat($ret,core:iff(core:eq($llast,19.01),",","=#19#01=("))),core:item($,lastseen,core:iff(core:geq($llast,19.01),$lastseen,($lastseen,19.01))),xqc:body($rest,$ret,$lastseen))));

core:define($,xqc:body-op,(),(core:item($,no),core:item($,rest),core:string($,ret),core:item($,lastseen)),core:item(),((core:item($,llast,core:filter($lastseen,(core:geq(position(.),last(.))))),core:item($,ret,concat($ret,core:iff(core:eq($llast,19.01),core:iff(core:eq($no,20.01),",",")"),""))),core:item($,lastseen,core:iff(core:eq($llast,19.01),core:iff(core:eq($no,20.01),$lastseen,xqc:pop($lastseen)),$lastseen)),core:item($,llast,core:filter($lastseen,(core:geq(position(.),last(.))))),core:iff(core:eq($no,1),xqc:op-comma($rest,$ret,$lastseen),core:iff(core:eq($no,25.01),xqc:comment($rest,$ret,$lastseen),core:iff(core:eq($no,21.06),xqc:anon(core:select(head($rest),(string(.))),tail($rest),$ret,$lastseen),core:iff(core:eq($no,2.09),xqc:op-let($rest,$ret,$lastseen,$llast),core:iff(core:geq($no,(20.01,20.04)),xqc:op-open-square($no,$rest,$ret,$lastseen),core:iff(core:or(core:eq($no,26),(core:and(core:eq($no,2.10),core:eq(core:filter($lastseen,(core:geq(position(.),core:subtract(last(.),1)))),21.07)))),xqc:body($rest,concat($ret,","),$lastseen),core:iff(core:eq($no,20.07),xqc:op-close-curly($rest,$ret,$lastseen),core:iff(core:geq($no,(2.07,2.10)),xqc:op-then-assign($no,$rest,$ret,$lastseen,$llast),core:iff(core:geq($no,(2.08,2.11)),xqc:op-else-return($no,$rest,$ret,$lastseen),core:iff(core:eq($no,20.02),xqc:op-close-square($rest,$ret,$lastseen,$llast),core:iff(core:eq($no,20.06),xqc:op-open-curly($rest,$ret,$lastseen,$llast),core:iff(core:eq($no,19.01),xqc:op-select($rest,$ret,$lastseen,$llast),core:iff(core:eq(round($no),21),xqc:op-constructor($no,$rest,$ret,$lastseen),core:iff(core:geq($no,(2.06,20.01)),xqc:body($rest,concat($ret,xqc:op-str($no)),($lastseen,$no)),xqc:body($rest,concat($ret,xqc:op-str($no)),$lastseen))))))))))))))))));

core:define($,xqc:paren-closer,(),(core:item($,head),core:item($,lastseen)),core:item(),(core:iff(matches($head,"[\(\)]+"),(core:item($,cp,string-to-codepoints($head)),core:item($,old,$lastseen),core:item($,lastseen,($lastseen,core:for-each(core:filter($cp,(core:eq(.,40))),0.01))),core:iff(core:geq($lastseen,0.01),xqc:close(reverse($lastseen),count(core:filter($cp,(core:eq(.,41)))),()),$lastseen)),$lastseen)));

core:define($,xqc:body,(),(core:item($,parts),core:item($,ret),core:item($,lastseen)),core:item(),(core:iff(empty($parts),concat($ret,string-join(core:for-each(core:filter($lastseen,(core:geq(.,(2.08,2.11,20.07,2.18,19.01)))),")"))),(core:item($,head,core:select(head($parts),(string(.)))),core:item($,rest,tail($parts)),core:item($,llast,core:filter($lastseen,(core:geq(position(.),last(.))))),core:item($,lastseen,core:iff(core:eq($llast,0),xqc:pop($lastseen),$lastseen)),core:item($,lastseen,xqc:paren-closer($head,$lastseen)),core:iff(core:geq($head,"=#25#01="),xqc:comment($rest,$ret,$lastseen),core:iff(matches($head,";"),xqc:block($parts,$ret),(core:item($,next,core:select(head($rest),(string(.)))),core:item($,rest,core:iff(core:and(core:geq($head,$xqc:fns),matches($next,"[^\.]\)")),insert-before(tail($rest),1,core:element(fn:match,(core:element(fn:group,(core:attribute(nr,(1)),replace($next,"^([^\)]*)\)","$1.)")))))),$rest)),core:item($,head,core:iff(core:and(core:eq($head,"=#20#01="),core:ne($llast,0)),"=#20#04=",$head)),core:iff(matches($head,$xqc:operator-regexp),xqc:body-op(xqc:op-num($head),$rest,$ret,$lastseen),xqc:body($rest,concat($ret,$head),core:iff(matches($head,"\("),$lastseen,($lastseen,0)))))))))));

core:define($,xqc:ximport,(),(core:item($,parts),core:item($,ret)),core:item(),((core:item($,rest,subsequence($parts,6)),core:item($,maybe-at,core:select(head($rest),(string(.)))),core:iff(matches($maybe-at,"at"),xqc:block(subsequence($rest,3),concat($ret,"core:ximport($,",core:select(core:filter($parts,(core:geq(position(.),3))),(string(.))),",",core:select(core:filter($parts,(core:geq(position(.),5))),(string(.))),",",core:select(core:filter($rest,(core:geq(position(.),2))),(string(.))),")")),xqc:block($rest,concat($ret,"core:ximport($,",core:select(core:filter($parts,(core:geq(position(.),3))),(string(.))),",",core:select(core:filter($parts,(core:geq(position(.),5))),(string(.))),")"))))));

core:define($,xqc:block,(),(core:item($,parts),core:item($,ret)),core:item(),(core:iff(empty($parts),$ret,(core:item($,val,core:select(head($parts),(string(.)))),core:item($,rest,tail($parts)),core:iff(matches($val,$xqc:operator-regexp),(core:item($,no,xqc:op-num($val)),core:iff(core:eq($no,2.14),xqc:xversion($rest,$ret),core:iff(core:eq($no,2.16),xqc:xmodule($rest,$ret),core:iff(core:eq($no,2.17),xqc:annot($rest,$ret,""),core:iff(core:eq($no,2.19),xqc:ximport($rest,$ret),xqc:body($parts,$ret,())))))),core:iff(matches($val,";"),core:iff(empty($rest),$ret,xqc:block($rest,concat($ret,","))),xqc:body($parts,$ret,())))))));

core:define($,xqc:to-op,(),(core:item($,opnum)),core:item(),(core:iff(map:contains($xqc:operator-map,$opnum),core:concat("core:",$xqc:operator-map($opnum)),core:concat("core:",replace($xqc:operators($opnum)," ","-")))));

core:define($,xqc:from-op,(),(core:item($,op)),core:item(),((core:item($,k,map:keys($xqc:operators-i)),core:item($,i,core:filter(index-of($k,replace($op,"^core:","")),(core:geq(position(.),1)))),core:decimal($xqc:operators-i(core:filter($k,(core:geq(position(.),$i))))))));

core:define($,xqc:escape-for-regex,(),(core:item($,key)),core:string(),((core:item($,arg,$xqc:operators($key)),core:item($,pre,"(^|[\s,\(\);\[\]]+)"),core:iff(matches($arg,"\p{L}+"),core:iff(core:eq($key,2.17),core:concat(core:concat("(\s?|;?)",$arg),"(\s?)"),core:iff(core:eq($key,21.06),core:concat(core:concat(core:concat(core:concat($pre,$arg),"([\s"),$xqc:ncname),":]*\s*\((\$|\)))"),core:iff(core:eq(round($key),21),core:concat(core:concat(core:concat(core:concat($pre,$arg),"([\s\$"),$xqc:ncname),",:]*=#20#06)"),core:iff(core:or(core:eq($key,2.04),core:eq(round($key),22)),core:concat(core:concat($pre,$arg),"(\()"),core:iff(core:eq(round($key),24),core:concat(core:concat($pre,$arg),"(\s)"),core:iff(core:geq($arg,"if"),core:concat(core:concat($pre,$arg),"(\s?)"),core:iff(core:geq($arg,"then"),core:concat(core:concat("\)(\s*)",$arg),"(\s?)"),core:concat(core:concat("(^|\s)",$arg),"(\s|$)")))))))),(core:item($,arg,replace($arg,"(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))","\\$1")),core:iff(core:eq($key,26),core:concat(core:concat("(\s?)",$arg),"(\s*[^\p{L}_])"),core:iff(core:eq($key,2.10),"(\s?):\s*=([^#])",core:iff(core:geq($key,(8.02,17.02)),core:concat(core:concat("(^|\s|[^\p{L}\p{N}]\p{N}+|[\(\)\.,])",$arg),"([\s\p{N}])?"),core:iff(core:geq($key,(8.01,9.01,20.03)),core:concat(core:concat("([^/])",$arg),"(\s*[^,\)\{])"),core:concat(core:concat("(\s?)",$arg),"(\s?)"))))))))));

core:define($,xqc:unary-op,(),(core:item($,op)),core:item(),(core:iff(core:eq(round($op),17),$op,core:add($op,9))));

core:define($,xqc:op-num,(),(core:item($,op)),core:decimal(),(core:iff(core:ne($op,""),core:decimal(replace($op,"^=#(\p{N}+)#?(\p{N}*)=$","$1.$2")),0)));

core:define($,xqc:op-str,(),(core:item($,op)),core:item(),(concat("=#",replace(string($op),"\.","#"),"=")))
